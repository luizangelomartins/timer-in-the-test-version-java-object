


        // [ " CRIADOR: LUIZ ÂNGELO MARTINS " ]:



// PACOTE DA CLASSE:
package timer;


// IMPORTAÇÃO DE BIBLIOTECAS:
import java.text.SimpleDateFormat;
import java.util.TimerTask;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.plaf.basic.BasicComboBoxRenderer;


// MÉTODO PRINCIPAL DA CLASSE:
public class TimerFrame extends javax.swing.JFrame {
    
    
    // DECLARAÇÃO DE VARIAVEIS E OBJETOS:
    int aux1 = 0;
    int tempo1 = 0;
    int tempo2 = 0;
    int tempo3 = 0;
    int tempo4 = 0;
    int tempo5 = 0;
    int tempo6 = 0;
    BasicComboBoxRenderer.UIResource UIResource = new BasicComboBoxRenderer.UIResource();  

    
    // " INICIALIZADOR ":
    public TimerFrame() {
        
        initComponents();
        ImageIcon icone = new ImageIcon(getClass().getResource("/icones/clock_play.png"));
        setIconImage(icone.getImage());
        
        txt_display.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        UIResource.setHorizontalAlignment(SwingConstants.CENTER);  
        txt_botao_parar.setEnabled(false);
        txt_botao_zerar_valores.setEnabled(false);
        
        txt_segundos_parte1.removeAllItems();
        txt_segundos_parte2.removeAllItems();
        txt_minutos_parte1.removeAllItems();
        txt_minutos_parte2.removeAllItems();
        txt_horas_parte1.removeAllItems();
        txt_horas_parte2.removeAllItems();
        
        txt_segundos_parte1.setRenderer(UIResource);
        txt_segundos_parte2.setRenderer(UIResource);
        txt_minutos_parte1.setRenderer(UIResource);
        txt_minutos_parte2.setRenderer(UIResource);
        txt_horas_parte1.setRenderer(UIResource);
        txt_horas_parte2.setRenderer(UIResource);
        
        int contador_numerico1 = 0;
        int contador_numerico2 = 0;
        
        while ( contador_numerico1 != 10 ) { 
            txt_segundos_parte1.addItem(String.valueOf(contador_numerico1)); 
            txt_minutos_parte1.addItem(String.valueOf(contador_numerico1)); 
            txt_horas_parte1.addItem(String.valueOf(contador_numerico1));
            txt_horas_parte2.addItem(String.valueOf(contador_numerico1)); 
            contador_numerico1++;
        }
        
        while ( contador_numerico2 != 6 ) { 
            txt_segundos_parte2.addItem(String.valueOf(contador_numerico2)); 
            txt_minutos_parte2.addItem(String.valueOf(contador_numerico2)); 
            contador_numerico2++;
        }
        
        txt_horas_parte1.setSelectedIndex(1);
        txt_horas_parte2.setEnabled(false);
        
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txt_painel_geral = new javax.swing.JPanel();
        txt_botao_temporizar = new javax.swing.JButton();
        txt_botao_cronometrar = new javax.swing.JButton();
        txt_display = new javax.swing.JLabel();
        txt_horas_parte2 = new javax.swing.JComboBox<>();
        txt_horas_parte1 = new javax.swing.JComboBox<>();
        txt_minutos_parte2 = new javax.swing.JComboBox<>();
        txt_minutos_parte1 = new javax.swing.JComboBox<>();
        txt_segundos_parte2 = new javax.swing.JComboBox<>();
        txt_segundos_parte1 = new javax.swing.JComboBox<>();
        txt_botao_parar = new javax.swing.JButton();
        txt_botao_zerar_valores = new javax.swing.JButton();
        txt_barra_de_menu_geral = new javax.swing.JMenuBar();
        txt_menu_geral = new javax.swing.JMenu();
        txt_sub_item_sair = new javax.swing.JMenuItem();
        txt_menu_sobre = new javax.swing.JMenu();
        txt_sub_item_info = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("TIMER");
        setResizable(false);

        txt_painel_geral.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "- PAINEL GERAL -", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N

        txt_botao_temporizar.setBackground(new java.awt.Color(204, 255, 51));
        txt_botao_temporizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/clock_play.png"))); // NOI18N
        txt_botao_temporizar.setText("TEMPORIZAR");
        txt_botao_temporizar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        txt_botao_temporizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_botao_temporizarActionPerformed(evt);
            }
        });

        txt_botao_cronometrar.setBackground(new java.awt.Color(204, 255, 51));
        txt_botao_cronometrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/clock_play.png"))); // NOI18N
        txt_botao_cronometrar.setText("CRONOMETRAR");
        txt_botao_cronometrar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        txt_botao_cronometrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_botao_cronometrarActionPerformed(evt);
            }
        });

        txt_display.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/clock_edit.png"))); // NOI18N
        txt_display.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "- DISPLAY -", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N

        txt_horas_parte2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        txt_horas_parte2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        txt_horas_parte1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        txt_horas_parte1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        txt_minutos_parte2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        txt_minutos_parte2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        txt_minutos_parte1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        txt_minutos_parte1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        txt_segundos_parte2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        txt_segundos_parte2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        txt_segundos_parte1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        txt_segundos_parte1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        txt_botao_parar.setBackground(new java.awt.Color(102, 255, 102));
        txt_botao_parar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/clock_stop.png"))); // NOI18N
        txt_botao_parar.setText("PARAR");
        txt_botao_parar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        txt_botao_parar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_botao_pararActionPerformed(evt);
            }
        });

        txt_botao_zerar_valores.setBackground(new java.awt.Color(153, 153, 255));
        txt_botao_zerar_valores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/clock_delete.png"))); // NOI18N
        txt_botao_zerar_valores.setText("ZERAR VALORES");
        txt_botao_zerar_valores.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        txt_botao_zerar_valores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_botao_zerar_valoresActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout txt_painel_geralLayout = new javax.swing.GroupLayout(txt_painel_geral);
        txt_painel_geral.setLayout(txt_painel_geralLayout);
        txt_painel_geralLayout.setHorizontalGroup(
            txt_painel_geralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(txt_painel_geralLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(txt_painel_geralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(txt_painel_geralLayout.createSequentialGroup()
                        .addComponent(txt_botao_cronometrar, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_botao_parar, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_botao_temporizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(txt_painel_geralLayout.createSequentialGroup()
                        .addGroup(txt_painel_geralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txt_display, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(txt_painel_geralLayout.createSequentialGroup()
                                .addComponent(txt_horas_parte2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_horas_parte1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_minutos_parte2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_minutos_parte1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_segundos_parte2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_segundos_parte1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(txt_botao_zerar_valores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        txt_painel_geralLayout.setVerticalGroup(
            txt_painel_geralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, txt_painel_geralLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txt_display, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(txt_painel_geralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_horas_parte2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_horas_parte1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_minutos_parte2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_minutos_parte1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_segundos_parte2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_segundos_parte1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(txt_painel_geralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_botao_cronometrar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_botao_parar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_botao_temporizar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_botao_zerar_valores, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txt_menu_geral.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/script_gear.png"))); // NOI18N
        txt_menu_geral.setText("GERAL");

        txt_sub_item_sair.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        txt_sub_item_sair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cancel.png"))); // NOI18N
        txt_sub_item_sair.setText("SAIR");
        txt_sub_item_sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_sub_item_sairActionPerformed(evt);
            }
        });
        txt_menu_geral.add(txt_sub_item_sair);

        txt_barra_de_menu_geral.add(txt_menu_geral);

        txt_menu_sobre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/information.png"))); // NOI18N
        txt_menu_sobre.setText("SOBRE");

        txt_sub_item_info.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        txt_sub_item_info.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/error.png"))); // NOI18N
        txt_sub_item_info.setText("INFO");
        txt_sub_item_info.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_sub_item_infoActionPerformed(evt);
            }
        });
        txt_menu_sobre.add(txt_sub_item_info);

        txt_barra_de_menu_geral.add(txt_menu_sobre);

        setJMenuBar(txt_barra_de_menu_geral);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txt_painel_geral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txt_painel_geral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    // SUB ITEM DR MENU - SAIR - [ MENU GERAL ]:
    private void txt_sub_item_sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_sub_item_sairActionPerformed

        int confirmar_sair = 0;
        confirmar_sair = 0;
        confirmar_sair = JOptionPane.showConfirmDialog(null, "REALMENTE DESEJA SAIR ?");
        
        if ( confirmar_sair == 0 ) {

            System.exit(0);
            this.dispose();

        }

    }//GEN-LAST:event_txt_sub_item_sairActionPerformed

    
    // SUB ITEM DO MENU - INFO - [ MENU SOBRE ]:
    private void txt_sub_item_infoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_sub_item_infoActionPerformed

        JOptionPane.showMessageDialog(null, "PROJETO DE \"TIMER/TEMPORIZADOR\" QUE CONSISTE EM:" + "\n" + " - CRONOMETRAR" + "\n" + " - TEMPORIZAR", "AVISO:", 1);
        
    }//GEN-LAST:event_txt_sub_item_infoActionPerformed

    
    // BOTÃO CRONOMETRAR:
    private void txt_botao_cronometrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_botao_cronometrarActionPerformed
        
        int confirmar_contagem = 0;
        confirmar_contagem = 0;
        confirmar_contagem = JOptionPane.showConfirmDialog(null, "INICIAR A CONTAGEM ?");
        
        if ( confirmar_contagem == 0 ) {
        
        aux1 = 0;
        txt_botao_parar.setEnabled(true);
        txt_botao_cronometrar.setEnabled(false);
        txt_botao_temporizar.setEnabled(false);
        txt_botao_zerar_valores.setEnabled(false);
        txt_menu_geral.setEnabled(false);
        txt_menu_sobre.setEnabled(false);
        
        txt_segundos_parte1.setEnabled(false);
        txt_segundos_parte2.setEnabled(false);
        txt_minutos_parte1.setEnabled(false);
        txt_minutos_parte2.setEnabled(false);
        txt_horas_parte1.setEnabled(false);
        txt_horas_parte2.setEnabled(false);
        
        tempo6 = txt_segundos_parte1.getSelectedIndex();
        tempo5 = txt_segundos_parte2.getSelectedIndex();
        tempo4 = txt_minutos_parte1.getSelectedIndex();
        tempo3 = txt_minutos_parte2.getSelectedIndex();
        tempo2 = txt_horas_parte1.getSelectedIndex();
        tempo1 = txt_horas_parte2.getSelectedIndex();
        
        java.util.Timer timer = null;
        final SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");

        if (timer == null) {      
        
        timer = new java.util.Timer();  
        TimerTask tarefa = new TimerTask() {   
           
            public void run() {      

                try {      
              
                    txt_display.setText("CRONOMETRO - [ " + tempo1 + tempo2 + "h:" + tempo3 + tempo4 + "m:" + tempo5 + tempo6 + "s ]");
                    tempo6++;

                    // "SEGUNDOS":
                    if (tempo6 > 9) { tempo6 = 0; tempo5++; }
                    if (tempo5 > 5) { tempo5 = 0; tempo4++; }

                    // "MINUTOS":
                    if (tempo4 > 9) { tempo4 = 0; tempo3++; }
                    if (tempo3 > 5) { tempo3 = 0; tempo2++; }

                    // "HORAS":
                    if (tempo2 > 9) { tempo6 = 0; tempo5 = 0; tempo4 = 0; tempo3 = 0; tempo2 = 0; }
                     
                    txt_segundos_parte1.setSelectedIndex(tempo6-1);
                    txt_segundos_parte2.setSelectedIndex(tempo5);
                    txt_minutos_parte1.setSelectedIndex(tempo4);
                    txt_minutos_parte2.setSelectedIndex(tempo3);
                    txt_horas_parte1.setSelectedIndex(tempo2);
                    txt_horas_parte2.setSelectedIndex(tempo1);
                    
                    if ( aux1 == 1 ) { this.cancel(); }
        
        } catch (Exception e) {      
                    
                } catch (Throwable ex) {
                    
                }  
                
            }   
               
         };      
        
        if ( aux1 == 0 ) { timer.scheduleAtFixedRate(tarefa, 0, 1000); }  
        if ( aux1 == 1 ) { timer.cancel(); tarefa.cancel(); }
      
    }    
        
    }
        
    }//GEN-LAST:event_txt_botao_cronometrarActionPerformed

    
    // BOTÃO PARAR:
    private void txt_botao_pararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_botao_pararActionPerformed
        
        int confirmar_parar = 0;
        confirmar_parar = 0;
        confirmar_parar = JOptionPane.showConfirmDialog(null, "REALMENTE DESEJA PARAR A CONTAGEM ?");
        
        if ( confirmar_parar == 0 ) {

            aux1 = 1;
        
            txt_segundos_parte1.setEnabled(true);
            txt_segundos_parte2.setEnabled(true);
            txt_minutos_parte1.setEnabled(true);
            txt_minutos_parte2.setEnabled(true);
            txt_horas_parte1.setEnabled(true);
            txt_horas_parte2.setEnabled(false);

            txt_botao_cronometrar.setEnabled(true);
            txt_botao_temporizar.setEnabled(true);
            txt_botao_zerar_valores.setEnabled(true);
            txt_menu_geral.setEnabled(true);
            txt_menu_sobre.setEnabled(true);
            txt_botao_parar.setEnabled(false);

        }
        
    }//GEN-LAST:event_txt_botao_pararActionPerformed

    
    // BOTÃO ZERAR VALORES:
    private void txt_botao_zerar_valoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_botao_zerar_valoresActionPerformed
        
        int confirmar_zerar = 0;
        confirmar_zerar = 0;
        confirmar_zerar = JOptionPane.showConfirmDialog(null, "REALMENTE DESEJA ZERAR OS VALORES DA CONTAGEM ?");
        
        if ( confirmar_zerar == 0 ) {

            txt_display.setText(null);
            
            txt_segundos_parte1.setSelectedIndex(0);
            txt_segundos_parte2.setSelectedIndex(0);
            txt_minutos_parte1.setSelectedIndex(0);
            txt_minutos_parte2.setSelectedIndex(0);
            txt_horas_parte1.setSelectedIndex(1);
            txt_horas_parte2.setSelectedIndex(0);
            
            txt_botao_zerar_valores.setEnabled(false);

        }
        
        
    }//GEN-LAST:event_txt_botao_zerar_valoresActionPerformed

    
    // BOTÃO TEMPORIZAR:
    private void txt_botao_temporizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_botao_temporizarActionPerformed
        
        int confirmar_contagem = 0;
        confirmar_contagem = 0;
        confirmar_contagem = JOptionPane.showConfirmDialog(null, "INICIAR A CONTAGEM ?");
        
        if ( confirmar_contagem == 0 ) {
        
        aux1 = 0;
        txt_botao_parar.setEnabled(true);
        txt_botao_cronometrar.setEnabled(false);
        txt_botao_temporizar.setEnabled(false);
        txt_botao_zerar_valores.setEnabled(false);
        txt_menu_geral.setEnabled(false);
        txt_menu_sobre.setEnabled(false);
        
        txt_segundos_parte1.setEnabled(false);
        txt_segundos_parte2.setEnabled(false);
        txt_minutos_parte1.setEnabled(false);
        txt_minutos_parte2.setEnabled(false);
        txt_horas_parte1.setEnabled(false);
        txt_horas_parte2.setEnabled(false);
        
        tempo6 = txt_segundos_parte1.getSelectedIndex();
        tempo5 = txt_segundos_parte2.getSelectedIndex();
        tempo4 = txt_minutos_parte1.getSelectedIndex();
        tempo3 = txt_minutos_parte2.getSelectedIndex();
        tempo2 = txt_horas_parte1.getSelectedIndex();
        tempo1 = txt_horas_parte2.getSelectedIndex();
        
        java.util.Timer timer = null;
        final SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");

        if (timer == null) {      
        
        timer = new java.util.Timer();  
        TimerTask tarefa = new TimerTask() {   
           
            public void run() {      

                try {      
              
                    txt_display.setText("TEMPORIZADOR - [ " + tempo1 + tempo2 + "h:" + tempo3 + tempo4 + "m:" + tempo5 + tempo6 + "s ]");
                    tempo6--;

                    // "SEGUNDOS":
                    if (tempo6 < 0) { tempo6 = 9; tempo5--; }
                    if (tempo5 < 0) { tempo5 = 5; tempo4--; }

                    // "MINUTOS":
                    if (tempo4 < 0) { tempo4 = 9; tempo3--; }
                    if (tempo3 < 0) { tempo3 = 5; tempo2--; }

                    // "HORAS":
                    if (tempo2 == 0 && tempo3 == 0 && tempo4 == 0 && tempo5 == 0 && tempo6 == 0) {  
                    
                        tempo2 = 1;
                        tempo3 = 0;
                        tempo4 = 0;
                        tempo5 = 5;
                        tempo6 = 9;
                        
                    }
                     
                    txt_segundos_parte1.setSelectedIndex(tempo6+1);
                    txt_segundos_parte2.setSelectedIndex(tempo5);
                    txt_minutos_parte1.setSelectedIndex(tempo4);
                    txt_minutos_parte2.setSelectedIndex(tempo3);
                    txt_horas_parte1.setSelectedIndex(tempo2);
                    txt_horas_parte2.setSelectedIndex(tempo1);
                    
                    if ( aux1 == 1 ) { this.cancel(); }
        
        } catch (Exception e) {      
                    
                } catch (Throwable ex) {
                    
                }  
                
            }   
               
         };      
        
        if ( aux1 == 0 ) { timer.scheduleAtFixedRate(tarefa, 0, 1000); }  
        if ( aux1 == 1 ) { timer.cancel(); tarefa.cancel(); }
      
    }    
        
    }
        
    }//GEN-LAST:event_txt_botao_temporizarActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TimerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TimerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TimerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TimerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TimerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar txt_barra_de_menu_geral;
    private javax.swing.JButton txt_botao_cronometrar;
    private javax.swing.JButton txt_botao_parar;
    private javax.swing.JButton txt_botao_temporizar;
    private javax.swing.JButton txt_botao_zerar_valores;
    private javax.swing.JLabel txt_display;
    private javax.swing.JComboBox<String> txt_horas_parte1;
    private javax.swing.JComboBox<String> txt_horas_parte2;
    private javax.swing.JMenu txt_menu_geral;
    private javax.swing.JMenu txt_menu_sobre;
    private javax.swing.JComboBox<String> txt_minutos_parte1;
    private javax.swing.JComboBox<String> txt_minutos_parte2;
    private javax.swing.JPanel txt_painel_geral;
    private javax.swing.JComboBox<String> txt_segundos_parte1;
    private javax.swing.JComboBox<String> txt_segundos_parte2;
    private javax.swing.JMenuItem txt_sub_item_info;
    private javax.swing.JMenuItem txt_sub_item_sair;
    // End of variables declaration//GEN-END:variables
}




